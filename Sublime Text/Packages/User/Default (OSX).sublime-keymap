// User-defined keymap

[
  { "keys": ["end"], "command": "move_to", "args": {"to": "eol"} },
  { "keys": ["home"], "command": "move_to", "args": {"to": "bol"} },

  { "keys": ["shift+space"], "command": "move", "args": {"by": "characters", "forward": true}},
  { "keys": ["shift+ctrl+space"], "command": "move", "args": {"by": "subword_ends", "forward": true}},
  { "keys": ["super+alt+up"], "command": "jump_back"},

  // Overrides default behavior which is kinda wonky
  { "keys": ["ctrl+tab"], "command": "next_view" },
  { "keys": ["ctrl+shift+tab"], "command": "prev_view" },

  // Origami keybindings
  { "keys": ["ctrl+alt+up"], "command": "travel_to_pane", "args": {"direction": "up"} },
  { "keys": ["ctrl+alt+right"], "command": "travel_to_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+alt+down"], "command": "travel_to_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+alt+left"], "command": "travel_to_pane", "args": {"direction": "left"} },
  { "keys": ["ctrl+alt+e"], "command": "create_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+alt+o"], "command": "create_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+alt+x"], "command": "destroy_pane", "args": {"direction": "self"} },
  { "keys": ["ctrl+alt+enter"], "command": "toggle_zoom_pane", "args": {"fraction": 1} },
  { "keys": ["ctrl+alt+shift+up"], "command": "carry_file_to_pane", "args": {"direction": "up"} },
  { "keys": ["ctrl+alt+shift+right"], "command": "carry_file_to_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+alt+shift+down"], "command": "carry_file_to_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+alt+shift+left"], "command": "carry_file_to_pane", "args": {"direction": "left"} },

  { "keys": ["super+shift+d"], "command": "find_all_under" },
  
  // Keybindings for various plugins
  { "keys": ["super+shift+'"], "command": "unquote" },
  { "keys": ["super+'"], "command": "select_quoted" },
  { "keys": ["super+shift+space"], "command": "expand_region" },

  // stop overtype for )"']}
  { "keys": ["\""], "command": "insert", "args": {"characters": "\""}, "context": [
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^\"", "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "[^\"]$", "match_all": true }
  ]},
  { "keys": ["'"], "command": "insert", "args": {"characters": "'"}, "context": [
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "[^']$", "match_all": true }
  ]},
  { "keys": [")"], "command": "insert", "args": {"characters": ")"}, "context": [
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "[^(]$", "match_all": true }
  ]},
  { "keys": [")"], "command": "move", "args": {"by": "characters", "forward": true}, "context": [
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true }
  ]},
  { "keys": ["'"], "command": "insert", "args": {"characters": "'"}, "context": [
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "'$", "match_all": true }
  ]},
  { "keys": ["]"],"command": "insert", "args": {"characters": "]"}, "context": [
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "[$", "match_all": true }
  ]},
  { "keys": ["}"], "command": "insert", "args": {"characters": "}"}, "context": [
    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
    { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true },
    { "key": "preceding_text", "operator": "regex_contains", "operand": "{$", "match_all": true }

  ]},

  // By default, sublime does not auto-pair brackets unless the following character is a tab, space, ), ], }, or end of line.
  // That's dumb, so this disables that behavior, making it so brackets are always paired.
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$0}"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
    ]
  },
  { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$0]"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
    ]
  },
  { "keys": ["("], "command": "insert_snippet", "args": {"contents": "($0)"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
    ]
  }

//  { "keys": ["super+shift+space"], "command": "auto_complete", "context": { "key": "auto_complete_visible", "operator": "equal", "operand": true }}
]
