<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.shau-kote.alfred.tunnelblick-toggle</string>
	<key>connections</key>
	<dict>
		<key>085D1468-49F0-4886-9D60-CCD637EB4012</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>57172F40-D365-40D7-B7FD-48C6887C1C09</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>shau-kote</string>
	<key>description</key>
	<string>Check and toggle status of Tunnelblick connections</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Tunnelblick Toggle</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>set action to first character of "{query}"
set config_name to text 2 thru -1 of "{query}"

if action is equal to "1" then
    tell application "Tunnelblick" to connect (config_name)
else
    tell application "Tunnelblick" to disconnect (config_name)
end if
</string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>57172F40-D365-40D7-B7FD-48C6887C1C09</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>vpn</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>script</key>
				<string>set Helper to (load script alias ":Helper.scpt")
set query to Helper's strip("{query}")
set xml_output to Helper's create_xmloutput()

tell application "Tunnelblick"
    set config_count to length of (get configurations)
    set i to 1

    repeat while i ≤ config_count
        set config_name to (get name of configuration (i))
        set config_state to (get state of configuration (i))

        if query = "" or (offset of query in config_name) ≠ 0 then

            if config_state is equal to "EXITING" then
                set xml_item to xml_output's create_item({ arg: "1" &amp; config_name, ¬
                                                           uid: config_name, ¬
                                                           autocomplete: config_name ¬
                                                        })
                xml_item's create_title(config_name &amp; ": disconnected")
                xml_item's create_subtitle("activate to connect", missing value)

            else if config_state is equal to "CONNECTED" then
                set xml_item to xml_output's create_item({ arg: "0" &amp; config_name, ¬
                                                           uid: config_name, ¬
                                                           autocomplete: config_name ¬
                                                        })
                xml_item's create_title(config_name &amp; ": connected")
                xml_item's create_subtitle("activate to disconnect", missing value)

            else
                set xml_item to xml_output's create_item({ arg: "0" &amp; config_name, ¬
                                                           uid: config_name, ¬
                                                           autocomplete: config_name ¬
                                                        })
                xml_item's create_title(config_name &amp; ": connecting")
                xml_item's create_subtitle("activate to disconnect", missing value)
            end if

            xml_item's create_icon("icon.png", missing value)
        end if
        set i to i + 1
    end repeat
end tell

if xml_output's total_item_count() is 0 then
    set xml_item to xml_output's create_item({ valid: false })
    xml_item's create_title("Search did not match any connections")
    xml_item's create_icon("icon.png", missing value)
end if

xml_output's build_xml()
</string>
				<key>subtext</key>
				<string>View and toggle connection state</string>
				<key>title</key>
				<string>Tunnelblick VPN</string>
				<key>type</key>
				<integer>6</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>085D1468-49F0-4886-9D60-CCD637EB4012</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>085D1468-49F0-4886-9D60-CCD637EB4012</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>57172F40-D365-40D7-B7FD-48C6887C1C09</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string></string>
</dict>
</plist>
