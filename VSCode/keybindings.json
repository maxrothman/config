[
    //my necessities
    {
        "key": "shift+space",
        "command": "cursorMove",
        "args": {
            "to": "right",
            "by": "character"
        }
    },

    // Need to disable the default function of this keyboard combo to override it
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest"
    },
    {
        "key": "ctrl+space",
        "command": "cursorWordEndRight"
    },
    {
        "key": "ctrl+shift+space",
        "command": "editor.action.triggerSuggest"
    },

    // Same as above
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "shift+cmd+]",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "shift+cmd+[",
        "command": "-workbench.action.previousEditor"
    },

    {
        "key": "alt+j",
        "command": "workbench.action.focusPanel",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "panelFocus"
    },

    //from Expand Selection to Scope plugin
    {
        "key": "cmd+shift+space",
        "command": "expand-selection-to-scope.expand"
    },
    {
        "key": "cmd+shift+space",
        "command": "-editor.action.triggerParameterHints"
    },

    //from Quick and Simple Text Selection plugin
    {
        "key": "cmd+'",
        "command": "extension.selectEitherQuote"
    },
    {
        "key": "cmd+shift+'",
        "command": "extension.switchQuotes"
    },

    // cmd+9 already focuses on the last editor in the group, but for some reason, by default cmd+1
    // focuses on the first editor group
    {
        "key": "cmd+1",
        "command": "workbench.action.firstEditorInGroup"
    },

    // Toggle between sidebar and main editor
    {
        "key": "cmd+0",
        "command": "-workbench.action.focusSideBar",
    },
    {
        "key": "cmd+0",
        "when": "!sideBarFocus",
        "command": "workbench.action.focusSideBar"
    },
    {
        "key": "cmd+0",
        "when": "sideBarFocus",
        "command": "workbench.action.focusActiveEditorGroup"
    },

    // Have PageUp and PageDown only scroll a half page
    {
        "key": "PageDown",
        "command": "extension.halfDown",
        "when": "textInputFocus"
    },
    {
        "key": "PageUp",
        "command": "extension.halfUp",
        "when": "textInputFocus"
    },

    //
    // Clojure Calva stuff
    //

    // Use alt+arrows for sexp navigation (and backspace)
    // Also disable unused default bindings
    {
        "key": "ctrl+alt+backspace",
        "command": "-paredit.killSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && && !editorReadonly && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+backspace",
        "command": "paredit.killSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },


    {
        "key": "alt+up",
        "command": "paredit.forwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !calva:outputWindowActive && !calva:replHistoryCommandsActive"
    },
    {
        "key": "alt+down",
        "command": "paredit.forwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !calva:outputWindowActive && !calva:replHistoryCommandsActive"
    },
    {
        "key": "ctrl+alt+up",
        "command": "paredit.backwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+down",
        "command": "paredit.backwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },


    // Redo the wrap-in shortcuts to saner bindings
    {
        "key": "ctrl+shift+alt+9",
        "command": "paredit.wrapAroundParens",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },
    {
        "key": "ctrl+shift+alt+p",
        "command": "-paredit.wrapAroundParens",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },

    {
        "key": "ctrl+alt+[",
        "command": "paredit.wrapAroundSquare",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },
    {
        "key": "ctrl+shift+alt+s",
        "command": "-paredit.wrapAroundSquare",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },

    {
        "key": "ctrl+shift+alt+[",
        "command": "paredit.wrapAroundCurly",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },
    {
        "key": "ctrl+shift+alt+c",
        "command": "-paredit.wrapAroundCurly",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },

    // Remap non-clojure alt shortcuts to cmd+alt
    {
        "key": "alt+cmd+right",
        "command": "cursorWordEndRight",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+cmd+left",
        "command": "cursorWordLeft",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+cmd+backspace",
        "command": "deleteWordLeft",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },
    {
        "key": "alt+cmd+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },
    {
        "key": "alt+cmd+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && !editorReadonly"
    },
    {
        "key": "alt+cmd+shift+left",
        "command": "cursorWordLeftSelect",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+cmd+shift+right",
        "command": "cursorWordEndRightSelect",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },

    // These two previously used alt+cmd+up/down, so remap them to require shift as well
    {
        "key": "alt+cmd+shift+up",
        "command": "editor.action.insertCursorAbove",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+cmd+shift+down",
        "command": "editor.action.insertCursorBelow",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },

    // Restore these to their defaults
    {
        // Move by word
        "key": "ctrl+backspace",
        "command": "-paredit.killListBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    
    // Do nothing to avoid confusion
    {
        "key": "ctrl+up",
        "command": "-paredit.backwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+down",
        "command": "-paredit.forwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },

    // Defer to subword navigation's delete word part left
    {
        "key": "ctrl+backspace",
        "command": "-paredit.killListBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    }
]
